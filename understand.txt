How to Connect Two Tables in PostgreSQL (Simple Explanation)
In PostgreSQL, connecting two tables is done using Foreign Keys.

This helps in linking data between tables.

CREATE TABLE departments (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE employees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    department_id INT REFERENCES departments(id)  -- Foreign Key
);

3. What Happens Here?
departments.id is the Primary Key (each department has a unique ID).
employees.department_id is a Foreign Key that connects employees to their department.
REFERENCES departments(id) means each employee must belong to a department.


class Department(Base):
    __tablename__ = "departments"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)

class Employee(Base):
    __tablename__ = "employees"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String)
    email = Column(String, unique=True)
    department_id = Column(Integer, ForeignKey("departments.id"))
    department = relationship("Department", back_populates="employees")

class Question(Base):
    __tablename__ = "questions"
    id = Column(Integer, primary_key=True, index=True) 
    department_id = Column(Integer, ForeignKey("departments.id"))
    question = Column(Text)
    answer = Column(Text)
    department = relationship("Department", back_populates="questions")

# class QuestionAnswer(Base):
#     __tablename__ = "questions_answers"
#     id = Column(Integer, primary_key=True, index=True)
#     question = Column(Text, nullable=False)
#     answer = Column(Text, nullable=False)
#     department_id = Column(Integer, ForeignKey("departments.id"))
#     department = relationship("Department", back_populates="questions")
# @app.post("/upload-csv/")
# async def upload_csv(file: UploadFile = File(...), db: Session = Depends(get_db)):
#     contents = await file.read()
#     df = pd.read_csv(io.StringIO(contents.decode("utf-8")))

#     if "Questions" not in df.columns or "ans" not in df.columns:
#         return {"error": "CSV must contain 'question' and 'answer' columns"}

#     for _, row in df.iterrows():
#         qa_entry = QuestionAnswer(question=row["Questions"], answer=row["ans"])
#         db.add(qa_entry)

#     db.commit()
#     return {"message": "CSV uploaded and questions stored successfully"}


def add_question(question: QuestionCreate, db: Session = Depends(get_db)):
    dept = db.query(Department).filter(Department.name == question.department).first()
    if not dept:
        dept = Department(name=question.department)
        db.add(dept)
        db.commit()
        db.refresh(dept)

    new_question = Question(
        question=question.question, 
        answer=question.answer, 
        department_id=dept.id
    )
    db.add(new_question)    
    db.commit()
    db.refresh(new_question)

    return {"message": "Question added successfully", "question_id": new_question.id}




class QuestionCreate(BaseModel):
    question: str
    answer: str
    department: str


class Question(Base):
    __tablename__ = "employee_kpi"
    id = Column(Integer, primary_key=True, index=True)
    questions = Column(Text, nullable=False)
    answers = Column(Text, nullable=False)
    month = Column(Text, nullable=False)
    department_id = Column(Integer, ForeignKey("departments.id"), nullable=False)
    employee_id = Column(Integer, ForeignKey("employees.id"), nullable=False)
    department = relationship("Department", back_populates="employee_kpi")